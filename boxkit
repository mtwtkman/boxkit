#!/bin/bash
! command -v "distrobox" &>/dev/null && echo "`distrobox` not found." && exit 1

function usage
{
  if [ "${README_GEN}" ]; then
    entrypoint_default='<Project root path>'
  else
    entrypoint_default="$(pwd)"
  fi
  echo "boxkit is a helper tool for building development environment by using distrobox."
  echo ""
  echo "USAGE:"
  echo -e "\t[OPTIONS] ./boxkit"
  echo ""
  echo "OPTIONS:"
  echo -e "\tDISTROBOX_CONTAINER_NAME"
  echo -e "\t\tA name of your development container created by distrobox."
  echo -e "\t\tIf it wan't set then boxkit prompt will ask you it."
  echo ""
  echo -e "\tBOX_ENTRYPOINT_NAME"
  echo -e "\t\tThe entrypoint of result objects created by boxkit."
  echo -e "\t\tThis value is regarded as relative path under from a project root."
  echo -e "\t\tdefault: ${entrypoint_default}"
  echo ""
  echo -e "\tDISTROBOX_HOME_NAME"
  echo -e "\t\tA name of custom home directory name for your development container."
  echo -e "\t\tdefault: \${BOX_ENTRYPOINT_NAME}/.distrobox/home"
  echo ""
  echo -e "\tBOX_SCRIPT_NAME"
  echo -e "\t\tThe script name of the thin wrapper for distrobox."
  echo -e "\t\tdefault: \${BOX_ENTRYPOINT_NAME}/box"
  echo ""
  echo -e "\tDISTROBOX_IMAGE_NAME"
  echo -e "\t\tWhat image for creating your development container image."
  echo -e "\t\tdefault: Up to your distrobox config"
  echo ""
  echo -e "\tBOX_INIT_POST_HOOK"
  echo -e "\t\tColon separated commands after box initialization."
  echo -e "\t\tYou can pass any commands like BOX_INIT_POST_HOOK='ls;pwd;'."
  echo -e "\t\This options' value elements are permitted of combination of '<command>' and '<prefix>:<value>'."
  echo -e "\t\\tThere are two types <prefix> , 'r' or 'l'. Detail is below."
  echo -e "\t\t\t- 'r' prefix presents 'remote'. r:<url> retrieve contents using curl from <url> and applies as is as command."
  echo -e "\t\t\t- 'l' prefix presents 'local'. l:<path> retrieve contents from local file <path> and applies as is as command."
  echo -e "\t\t\tFor instance, BOX_INIT_POST_HOOK='ls;pwd;r:https://something/scaffolding/ghcup;l:../setup-mise' means 'After box initialization, I do 'ls', 'pwd', 'Retrieve commands from https://something/scaffolding/ghcup', 'Retrieve from ./setup-mise'."
  echo -e "\t\tdefault: Do nothing"
}

[ ! $# = 0 ] && usage && exit 0

container_name="$(basename $(realpath $(pwd)))-dev"

if [ ! "${DISTROBOX_CONTAINER_NAME}" ]; then
  read -p "Please input name for your development container if you want. (default: ${container_name}) > " user_input_container_name
  [ ! -z "${user_input_container_name}" ] && container_name="${user_input_container_name}"
else
  container_name="${DISTROBOX_CONTAINER_NAME}"
fi

echo -e "Your development container name is \e[33m${container_name}\e[0m"

box_entrypoint_path="$(readlink -f ${BOX_ENTRYPOINT_NAME:-$(pwd)})"
distrobox_manifest_path="${box_entrypoint_path}/distrobox.ini"
home_name="${box_entrypoint_path}/${DISTROBOX_HOME_NAME:-.distrobox/home}"
box_script_name="${BOX_SCRIPT_NAME:-box}"
box_script_path="${box_entrypoint_path}/${box_script_name}"
image_name="${DISTROBOX_IMAGE_NAME}"

box_initialization_post_hook=
if [[ "${BOX_INIT_POST_HOOK}" ]]; then
  IFS=';' read -ra elements <<< "${BOX_INIT_POST_HOOK}"
  for element in "${elements[@]}"; do
    if [[ "$element" =~ ":" ]]; then
      prefix=$(echo "$element" | cut -d':' -f1)
      value=$(echo "$element" | cut -d':' -f2-)
      case "$prefix" in
        "r")
          content=$(curl -s "$value")
          processed_element="$content"
          ;;
        "l")
          if [[ -f "$value" ]]; then
            content=$(cat "$value")
            processed_element="$content"
          else
            processed_element="[Error: File not found at $value]"
          fi
          ;;
        *)
          processed_element="$value"
          ;;
      esac
    else
      processed_element="$element"
    fi
    if [[ -n "$box_initialization_post_hook" ]]; then
      box_initialization_post_hook+=";"
    fi
    box_initialization_post_hook+="$processed_element"
  done
fi

function create_with_confirmation
{
  local target=$1
  local target_exists="$([ -e ${target} ])"
  yn="y"
  [ "${target_exists}" = "0" ] && read -p "Do you want to recreate ${target}? [y/n]> " yn
  [ "${target_exists}" = "0" ] && [ "${yn}" != 'y' ] && return
  [ "${target_exsits}" = "0" ] && /bin/rm -rf $target

  shift
  eval "$@"
  echo -e "create \e[33m${target}.\e[0m"
}

function generate_distrobox_manifest
{
  echo "[${container_name}]" > $distrobox_manifest_path
  [ "${image_name}" ] && echo $"image=${image_name}" >> $distrobox_manifest_path
  cat <<EOF >> $distrobox_manifest_path
additional_packages="fd fzf git neovim ripgrep make gcc bat"
home=${home_name}
init_hooks=export XDG_CONFIG_HOME=${home_name}/.config
init_hooks=export XDG_CACHE_HOME=${home_name}/.cache
init_hooks=export XDG_STATE_HOME=${home_name}/.local/state
init_hooks=export XDG_DATA_HOME=${home_name}/.local/share
EOF
}

function generate_box_script
{
cat <<BOX > $box_script_path
#!/bin/sh

function show_box_script_usage
{
  echo ""
  echo "${box_script_name} is a thin wrapper to manipulate distrobox handy."
  echo ""
  echo "USAGE:"
  echo -e "\\t./${box_script_name} [COMMAND] [OPTION]"
  echo ""
  echo "COMMANDS:"
  echo -e "\\tenter | e [-r]"
  echo -e "\\t\\tEnter your development container via distrobox. If the continer have not existed, ${script_name} will create it."
  echo -e "\\t\\tYou can pass -r option to recreate the container then ${home_name} will be recreated also."
  echo ""
  echo -e "\\tinit | i [-f]"
  echo -e "\\t\\tInitialize your development container. You should run command in your development container at first."
  echo -e "\\t\\tThis command will deploy .bashrc and some configs(Current targets are nvim, bat and git)"
  echo -e "\\\t\\tYou can pass -f option to force initialize again."
  echo ""
  echo -e "\\tstop | s"
  echo -e "\\t\\tStop the development container."
}

[ \$# = 0 ] && show_box_script_usage && exit 0

cmd="\$1"

shift

function create_box
{
  [ "\${CONTAINER_ID}" ] && return
  /bin/rm -rf ${home_name}
  [ "\$(distrobox list | rg ${container_name})" ] && distrobox assemble rm --file $distrobox_manifest_path
  [ ! "\$(distrobox list | rg ${container_name})" ] && distrobox assemble create --file $distrobox_manifest_path
}

function create_symlink
{
  [ -L "\${2}" ] && return

  [ ! -e "\${1}" ] && echo "Cannot find source path. So do nothing. (\${1})" && return
  ln -s "\${1}" "\${2}"
}

function generate_bashrc
{
  cat <<EOF > ${home_name}/.bashrc
#!/bin/sh

export BOX_INITIALIZED=1

alias l="ls -CF"
alias la="ls -A"
alias ll="ls -alF"
alias vim="nvim"

source /usr/share/bash-completion//bash_completion
source /usr/share/bash-completion/completions/git
source /usr/share/git/completion/git-completion.bash
source /usr/share/git/completion/git-prompt.sh

export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow -g \"!{.git,node_modules}/*\" 2> /dev/null"
export FZF_DEFAULT_OPTS="""
--reverse
--extended
--multi
--inline-info
--prompt='fzf>'
--ansi
--preview='bat --style=full --color=always {}'
--bind=ctrl-f:page-down,ctrl-b:page-up,'ctrl-v:become(vim {})',ctrl-^:first,ctrl-/:last
--color=bg+:#313244,spinner:#f5e0dc,hl:#f38ba8
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8
"""
export FZF_CTRL_T_COMMAND="\\${FZF_DEFAULT_COMMAND}"

eval "\\\$(fzf --bash)"

export GIT_PS1_SHOWCOLORHINTS=true
ps1_git='\\\$(__git_ps1 " (%s)")'
ps1_distrobox="î¶• : \e[33m\${CONTAINER_ID}\e[0m"
export PS1="\w\\\${ps1_git} - \\\${ps1_distrobox}\n\$ "
EOF
}

function initialize_box
{
  [ "\$#" = 1 ] && [ "\$1" = "-f" ] && unset BOX_INITIALIZED
  [ "\${BOX_INITIALIZED}" ] && echo "Already initialized bye." && exit 0
  [ ! -d "\${XDG_CONFIG_HOME}" ] && mkdir "\${XDG_CONFIG_HOME}"

  create_symlink \${DISTROBOX_HOST_HOME}/.ssh "\${HOME}/.ssh"
  create_symlink \${DISTROBOX_HOST_HOME}/.config/nvim "\${XDG_CONFIG_HOME}/nvim"
  create_symlink \${DISTROBOX_HOST_HOME}/.config/git "\${XDG_CONFIG_HOME}/git"
  create_symlink \${DISTROBOX_HOST_HOME}/.config/bat "\${XDG_CONFIG_HOME}/bat"

  generate_bashrc

  echo "generated ${home_name}/.bashrc"

  ${box_initialization_post_hook}
}

case "\${cmd}" in
  enter|e)
    [ "\${CONTAINER_ID}" ] && echo "Already in distrobox container, so do nothing" && exit 0
    [ ! "\$(distrobox list | rg ${container_name})" ] && create_box
    [ "\$#" = 1 ] && [ "\$1" = "-r" ] && create_box
    distrobox enter "${container_name}"
    ;;
  init|i)
    [ -z "\${CONTAINER_ID}" ] && echo "This command is only permitted inner distrobox container. Please run \`./${box_script_name} enter\`" && exit 0
    initialize_box \$@
    ;;
  bashrc|b) generate_bashrc;;
  replace|r) distrobox assemble create --replace --file ${distrobox_manifest_path};;
  stop|s)
    [ "\${CONTAINER_ID}" ] && exit 0
    [ ! "\$(distrobox list | rg ${container_name})" ] && exit 0
    distrobox stop ${container_name}
    ;;
  *) show_box_script_usage;;
esac
BOX
}

[ ! -d "${box_entrypoint_path}" ] && mkdir -p ${box_entrypoint_path}
create_with_confirmation $home_name "mkdir -p ${home_name}"
create_with_confirmation $distrobox_manifest_path "generate_distrobox_manifest"
create_with_confirmation $box_script_path "generate_box_script"
chmod +x $box_script_path

echo 'Now you can run `./box enter` to start distrobox.'
