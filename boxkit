#!/bin/sh

! command -v "distrobox" &>/dev/null && echo "`distrobox` not found." && exit 1

function usage
{
  echo ""
  echo "boxkit is a helper tool for building development environment by using distrobox."
  echo ""
  echo "Usage: [DISTROBOX_CONTAINER_NAME=<distrobox container name>] [DISTROBOX_HOME_NAME=<distrobox custom home directory >] [BOX_SCRIPT_NAME=<helper script name>] [DISTROBOX_IMAGE_NAME=<distrobox image>] ./boxkit"
  echo ""
  echo "Parameters"
  echo "  * DISTROBOX_CONTAINER_NAME"
  echo "    If it wan't set then boxkit prompt asks you it."
  echo "  * DISTROBOX_HOME_NAME"
  echo "    default: '.distrobox/home'"
  echo "  * BOX_SCRIPT_NAME"
  echo "    default: 'box'"
  echo "  * DISTROBOX_IMAGE_NAME"
  echo "    default: Your distrobox config"
}

[ ! $# = 0 ] && echo "You can't pass any arguments. Usage here." && usage && exit 0

default_container_name="$(basename $(realpath $(pwd)))-dev"

echo "$default_container_name"

container_name="${DISTROBOX_CONTAINER_NAME:-${default_container_name}}"

fixed_container_name=""

if [ ! "${DISTROBOX_CONTAINER_NAME}" ]; then
  while ([ "${fixed_container_name}" != "y" ] && [ "${fixed_container_name}" != "n" ])
  do
    read -p "Boxkit detect the container name '${container_name}'. Are you sure? [y/n] > " fixed_container_name
  done
fi

if [ "${fixed_container_name}" = "n" ]; then
  container_name=""
  while [ ! "${container_name}"  ]
  do
    read -p "What do you want to name container? > " container_name
  done
fi

echo -e "Your development container name is \e[33m${container_name}\e[0m"

home_name="${DISTROBOX_HOME_NAME:-.distrobox/home}"
box_script_name="${BOX_SCRIPT_NAME:-box}"
image_name="${DISTROBOX_IMAGE_NAME}"

function create_with_confirmation
{
  local target=$1
  local target_exists="$([ -e ${target} ] && echo '0' )"
  yn="y"
  [ "${target_exists}" = "0" ] && read -p "Do you want to recreate ${target}? [y/n]> " yn
  [ "${target_exists}" = "0" ] && [ "${yn}" != 'y' ] && return
  [ "${target_exsits}" = "0" ] && /bin/rm -rf $target

  shift
  eval "$@"
  echo -e "create \e[33m${target}.\e[0m"
}

function generate_distrobox_manifest
{
  echo "[${container_name}]" > .distrobox.ini
  [ "${image_name}" ] && echo $"image=${image_name}" >> .distrobox.ini
  cat <<EOF >> .distrobox.ini
additional_packages="fd fzf git neovim ripgrep mise make gcc bat"
home=\`pwd\`/${home_name}
init_hooks=export XDG_CONFIG_HOME=\`pwd\`/${home_name}/.config
init_hooks=export XDG_CACHE_HOME=\`pwd\`/${home_name}/.cache
init_hooks=export XDG_STATE_HOME=\`pwd\`/${home_name}/.local/state
init_hooks=export XDG_DATA_HOME=\`pwd\`/${home_name}/.local/share
EOF
}

function generate_box_script
{
cat <<BOX > $box_script_name
#!/bin/sh

cmd="\$1"

shift

function create_box
{
  [ "\${CONTAINER_ID}" ] && return
  /bin/rm -rf ${home_name}
  [ "\$(distrobox list | rg ${container_name})" ] && distrobox assemble rm --file .distrobox.ini
  [ ! "\$(distrobox list | rg ${container_name})" ] && distrobox assemble create --file .distrobox.ini
}

function create_symlink
{
  [ -L "\${2}" ] && return

  [ ! -e "\${1}" ] && echo "Cannot find source path. So do nothing. (\${1})" && return
  ln -s "\${1}" "\${2}"
}

function initialize_box
{
  [ "\$#" = 1 ] && [ "\$1" = "-f" ] && unset BOX_INITIALIZED
  [ "\${BOX_INITIALIZED}" ] && echo "Already initialized bye." && exit 0
  [ ! -d "\${XDG_CONFIG_HOME}" ] && mkdir "\${XDG_CONFIG_HOME}"

  create_symlink \${DISTROBOX_HOST_HOME}/.ssh "\${HOME}/.ssh"
  create_symlink \${DISTROBOX_HOST_HOME}/.config/nvim "\${XDG_CONFIG_HOME}/nvim"
  create_symlink \${DISTROBOX_HOST_HOME}/.config/git "\${XDG_CONFIG_HOME}/git"
  create_symlink \${DISTROBOX_HOST_HOME}/.config/bat "\${XDG_CONFIG_HOME}/bat"

  cat <<EOF > ~/.bashrc
#!/bin/sh

export BOX_INITIALIZED=1

alias l="ls -CF"
alias la="ls -A"
alias ll="ls -alF"
alias vim="nvim"

source /usr/share/bash-completion//bash_completion
source /usr/share/bash-completion/completions/git
source /usr/share/git/completion/git-completion.bash
source /usr/share/git/completion/git-prompt.sh

eval "\\\$(mise activate bash)"

export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow -g \"!{.git,node_modules}/*\" 2> /dev/null"
export FZF_DEFAULT_OPTS="""
--reverse
--extended
--multi
--inline-info
--prompt='fzf>'
--ansi
--preview='bat --style=full --color=always {}'
--bind=ctrl-f:page-down,ctrl-b:page-up,'ctrl-v:become(vim {})',ctrl-^:first,ctrl-/:last
--color=bg+:#313244,spinner:#f5e0dc,hl:#f38ba8
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8
"""
export FZF_CTRL_T_COMMAND="\\${FZF_DEFAULT_COMMAND}"

export GIT_PS1_SHOWCOLORHINTS=true
ps1_git='\\\$(__git_ps1 " (%s)")'
ps1_distrobox="î¶• : \e[33m\${CONTAINER_ID}\e[0m"
export PS1="\w\\\${ps1_git} - \\\${ps1_distrobox}\n\$ "
EOF

  echo "generated ~.bashrc"

  [ ! -f "mise.toml" ] && return

  mise trust
  mise install
}

function show_box_script_usage
{
  echo ""
  echo "${box_script_name} is a thin wrapper to manipulate distrobox handy."
  echo ""
  echo "Usage: ./${box_script_name} [COMMAND] [OPTION]"
  echo ""
  echo "Commands"
  echo "  * enter|e [-r]"
  echo "    Enter your development container via distrobox. If the continer have not existed, ${script_name} will create it."
  echo "    You can pass -r option to recreate the container then ${home_name} will be recreated also."
  echo "  * init|i [-f]"
  echo "    Initialize your development container. You should run command in your development container at first."
  echo "    This command will deploy .bashrc and some configs(Current targets are nvim, bat and git)"
  echo "    You can pass -f option to force initialize again."
  echo "  * stop"
  echo "    Stop the development container."
}

case "\${cmd}" in
  enter|e)
    [ "\${CONTAINER_ID}" ] && exit 0
    [ ! "\$(distrobox list | rg ${container_name})" ] && create_box
    [ "\$#" = 1 ] && [ "\$1" = "-r" ] && create_box
    distrobox enter "${container_name}"
    ;;
  init|i)
    [ ! "\${CONTAINER_ID}" ] && exit 0
    initialize_box \$@
    ;;
  stop)
    [ ! "\${CONTAINER_ID}" ] && exit 0
    [ ! "\$(distrobox list | rg ${container_name})" ] && exit 0
    distrobox stop ${container_name}
    ;;
  *) show_box_script_usage;;
esac
BOX
}

create_with_confirmation $home_name "mkdir -p $home_name"
create_with_confirmation ".distrobox.ini" "generate_distrobox_manifest"
create_with_confirmation $box_script_name "generate_box_script"
chmod +x $box_script_name

echo 'Now you can run `./box enter` to start distrobox.'
